package museumexhibition.ui.form.exhibition;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import museumexhibition.domain.*;
import museumexhibition.service.ExhibitionService;
import museumexhibition.service.MuseumService;
import museumexhibition.service.impl.ExhibitionServiceImpl;
import museumexhibition.service.impl.MuseumServiceImpl;
import museumexhibition.validation.*;

/**
 *
 * @author Marko Milošević, pravnik
 */
public class ExhibitionDetailsForm extends javax.swing.JDialog {

    private Exhibition exhibition;
    private ExhibitionService exhibitionService;
    private MuseumService museumService;

    /**
     * Creates new form ExhibitionDetailsForm
     */
    public ExhibitionDetailsForm(java.awt.Frame parent, boolean modal, Exhibition exhibition) throws Exception {
        super(parent, modal);
        initComponents();
        this.exhibition = exhibition;
        exhibitionService = new ExhibitionServiceImpl();
        museumService = new MuseumServiceImpl();
        prepareForm();
        populateTable();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblMuseum = new javax.swing.JLabel();
        comboMuseum = new javax.swing.JComboBox<>();
        pnlName = new museumexhibition.ui.components.MyInputComponent();
        pnlDate = new museumexhibition.ui.components.MyInputComponent();
        pnlDays = new museumexhibition.ui.components.MyInputComponent();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblExhibits = new javax.swing.JTable();
        btnEnableChanges = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Exhibition");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        lblMuseum.setText("Museum:");

        comboMuseum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboMuseum.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMuseum)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(comboMuseum, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMuseum)
                    .addComponent(comboMuseum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        tblExhibits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EXHIBIT ID", "EXHIBIT NAME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblExhibits);

        btnEnableChanges.setText("Enable changes");
        btnEnableChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnableChangesActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove exhibit");
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnAdd.setText("Add exhibit");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemove)
                        .addGap(82, 82, 82)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlDays, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2)
                    .addComponent(btnEnableChanges, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEnableChanges)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnRemove)
                    .addComponent(btnAdd))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnableChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnableChangesActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "Are you sure?", "Enable changes?", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            comboMuseum.setEnabled(true);
            btnAdd.setEnabled(true);
            btnRemove.setEnabled(true);
            btnSave.setEnabled(true);
            btnEnableChanges.setEnabled(false);
        }
    }//GEN-LAST:event_btnEnableChangesActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Museum museum = (Museum) comboMuseum.getSelectedItem();
        Long id = museum.getId();
        try {
            String name = pnlName.getValue();
            String jdate = pnlDate.getValue();
            Date date = new SimpleDateFormat("dd.MM.yyyy.").parse(jdate);
            int durationInDays = Integer.parseInt(pnlDays.getValue());
            Exhibition exhibition = new Exhibition(museum, null, date, name, durationInDays);

            int option = JOptionPane.showConfirmDialog(null, "Are you sure?", "Update exhibition?", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                exhibitionService.update(id, date, name, durationInDays, this.exhibition);
                JOptionPane.showMessageDialog(this, "Exhibition is successfully updated!");
                dispose();
                prepareForm();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error:" + ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        populateTable();
    }//GEN-LAST:event_formWindowActivated

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        new ExhibitionAddExhibit(null, true, exhibition).setVisible(true);
        populateTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selectedRow = tblExhibits.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please, select a row.");
        } else {
            try {
                String model = tblExhibits.getValueAt(selectedRow, 0).toString();
                exhibitionService.deleteExhibit(exhibition.getMuseum().getId(), exhibition.getOpening(), model);
                populateTable();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEnableChanges;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<Object> comboMuseum;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMuseum;
    private museumexhibition.ui.components.MyInputComponent pnlDate;
    private museumexhibition.ui.components.MyInputComponent pnlDays;
    private museumexhibition.ui.components.MyInputComponent pnlName;
    private javax.swing.JTable tblExhibits;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() throws Exception {
        List<Museum> museums = museumService.getAll();
        comboMuseum.setModel(new DefaultComboBoxModel<>(museums.toArray()));
        comboMuseum.setSelectedItem(exhibition.getMuseum());

        pnlName.init("*Name:", exhibition.getName(), "");
        pnlName.setValidator(new RequiredTextValidator());

        SimpleDateFormat sm = new SimpleDateFormat("dd.MM.yyyy.");
        pnlDate.init("*Opening date:", String.valueOf(sm.format(exhibition.getOpening())), "");
        pnlDate.setValidator(new RequiredDateValidator());

        pnlDays.init("*Duration in days:", String.valueOf(exhibition.getDurationInDays()), "");
        pnlDays.setValidator(new RequiredDurationInDaysValidator());

    }

    private void populateTable() {
        TableModel tm = tblExhibits.getModel();
        DefaultTableModel dtm = (DefaultTableModel) tm;
        dtm.setRowCount(0);
        try {
            List<Exhibit> exhibits = exhibitionService.getListNames(exhibition);
            tm = tblExhibits.getModel();
            dtm = (DefaultTableModel) tm;
            for (Exhibit exhibit : exhibits) {
                Object[] data = new Object[2];
                data[0] = exhibit.getId();
                data[1] = exhibit.getName();
                dtm.addRow(data);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
