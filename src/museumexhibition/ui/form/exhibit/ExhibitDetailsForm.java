package museumexhibition.ui.form.exhibit;

import javax.swing.JOptionPane;
import museumexhibition.domain.Exhibit;
import museumexhibition.service.ExhibitService;
import museumexhibition.service.impl.ExhibitServiceImpl;
import museumexhibition.ui.session.Session;
import museumexhibition.validation.RequiredTextValidator;

/**
 *
 * @author Marko Milošević, pravnik
 */
public class ExhibitDetailsForm extends javax.swing.JDialog {

    private ExhibitService exhibitService;
    private Exhibit exhibit;

    /**
     * Creates new form ExhibitDetailsForm
     */
    public ExhibitDetailsForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        exhibitService = new ExhibitServiceImpl();
        this.exhibit = (Exhibit) Session.getInstance().getMap().get("exhibit.selected");
        prepareForm();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlName = new museumexhibition.ui.components.MyInputComponent();
        pnlDescription = new museumexhibition.ui.components.MyInputComponent();
        btnDelete = new javax.swing.JButton();
        btnEnableChanges = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Exhibit");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEnableChanges.setText("Enable changes");
        btnEnableChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnableChangesActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnlDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addGap(106, 106, 106)
                        .addComponent(btnEnableChanges)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(btnEnableChanges))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete exhibit?", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            try {
                exhibitService.delete(exhibit.getId());
                JOptionPane.showMessageDialog(this, "Exhibit is successfully deleted!");
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error:" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        Long id = exhibit.getId();
        try {
            String name = pnlName.getValue();
            String description = pnlDescription.getValue();
            Exhibit exhibit = new Exhibit(id, name, description);
            int result = JOptionPane.showConfirmDialog(null, "Are you sure?", "Update exhibit?", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                exhibitService.update(exhibit);
                JOptionPane.showMessageDialog(this, "Exhibit is successfully updated!");
                dispose();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error:" + ex.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnEnableChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnableChangesActionPerformed
        btnDelete.setEnabled(false);
        btnUpdate.setVisible(true);
    }//GEN-LAST:event_btnEnableChangesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEnableChanges;
    private javax.swing.JButton btnUpdate;
    private museumexhibition.ui.components.MyInputComponent pnlDescription;
    private museumexhibition.ui.components.MyInputComponent pnlName;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        pnlName.init("*Name:", String.valueOf(exhibit.getName()), "");
        pnlName.setValidator(new RequiredTextValidator());
        pnlDescription.init("*Description:", String.valueOf(exhibit.getDescription()), "");
        pnlDescription.setValidator(new RequiredTextValidator());
        btnUpdate.setVisible(false);
    }
}
