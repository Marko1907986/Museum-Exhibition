package museumexhibition.ui.form.city;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import museumexhibition.domain.City;
import museumexhibition.service.CityService;
import museumexhibition.service.impl.CityServiceImpl;
import museumexhibition.validation.*;

/**
 *
 * @author Marko Milošević, pravnik
 */
public class CityNewForm extends javax.swing.JDialog {

    private CityService cityService;

    public CityNewForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        cityService = new CityServiceImpl();
        prepareForm();
        populateTable();
        btnDelete.setVisible(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        pnlZipcode = new museumexhibition.ui.components.MyInputComponent();
        pnlName = new museumexhibition.ui.components.MyInputComponent();
        btnCancel = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pnlCities = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCities = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New city");

        lblID.setText("*ID:");

        txtID.setEditable(false);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        pnlCities.setBorder(javax.swing.BorderFactory.createTitledBorder("Cities:"));

        tblCities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ZIPCODE", "NAME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCities.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCitiesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCities);

        javax.swing.GroupLayout pnlCitiesLayout = new javax.swing.GroupLayout(pnlCities);
        pnlCities.setLayout(pnlCitiesLayout);
        pnlCitiesLayout.setHorizontalGroup(
            pnlCitiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitiesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlCitiesLayout.setVerticalGroup(
            pnlCitiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitiesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(btnDelete)
                    .addGap(111, 111, 111)
                    .addComponent(btnSave))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlZipcode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(pnlCities, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlZipcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addComponent(pnlCities, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            Long id = null;
            if (!txtID.getText().isEmpty()) {
                id = Long.valueOf(txtID.getText());
            }
            Long zipcode = Long.valueOf(pnlZipcode.getValue());
            String name = pnlName.getValue();
            City city = new City(id, zipcode, name);
            int result = JOptionPane.showConfirmDialog(null, "Are you sure?", "Save city?", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                if (city.getId() == null) {
                    cityService.save(city);
                    JOptionPane.showMessageDialog(this, "City is successfully saved!");

                } else {
                    cityService.update(city);
                    JOptionPane.showMessageDialog(this, "City is successfully updated!");
                }
            }
            prepareForm();
            populateTable();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please update values", "Validation error!", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete city?", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            Long id = Long.valueOf(txtID.getText());
            try {
                cityService.delete(id);
                JOptionPane.showMessageDialog(this, "City is successfully deleted!");
                populateTable();
                prepareForm();
                btnDelete.setVisible(false);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error:" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblCitiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCitiesMouseClicked
        int selectedRow = tblCities.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please, select a city from the list.");
        } else {
            btnDelete.setVisible(true);
        }

        Long id = Long.valueOf(tblCities.getValueAt(selectedRow, 0).toString());
        Long zipcode = Long.valueOf(tblCities.getValueAt(selectedRow, 1).toString());
        String name = String.valueOf(tblCities.getValueAt(selectedRow, 2));

        txtID.setText(String.valueOf(id));
        pnlZipcode.init("*Zipcode:", String.valueOf(zipcode), "");
        pnlName.init("*Name:", name, "");
    }//GEN-LAST:event_tblCitiesMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblID;
    private javax.swing.JPanel pnlCities;
    private museumexhibition.ui.components.MyInputComponent pnlName;
    private museumexhibition.ui.components.MyInputComponent pnlZipcode;
    private javax.swing.JTable tblCities;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        txtID.setText("");
        pnlZipcode.init("*Zipcode:", "", "");
        pnlZipcode.setValidator(new RequiredZipcodeValidator());
        pnlName.init("*Name:", "", "");
        pnlName.setValidator(new RequiredTextValidator());
    }

    private void populateTable() {
        TableModel tm = tblCities.getModel();
        DefaultTableModel dtm = (DefaultTableModel) tm;
        dtm.setRowCount(0);

        try {
            List<City> cities = cityService.getAll();
            tm = tblCities.getModel();
            dtm = (DefaultTableModel) tm;
            for (City city : cities) {
                Object[] data = new Object[3];
                data[0] = city.getId();
                data[1] = city.getZipcode();
                data[2] = city.getName();
                dtm.addRow(data);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
